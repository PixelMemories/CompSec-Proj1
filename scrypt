#!/usr/bin/python3
import sys

# Author: Richard Li - (rl902)

def LinCon_gen(seed):

    x = seed % 256
    while True:
        x = (1103515245 * x + 12345) % 256
        yield x

def make_hash(password):

    h = 0
    for ch in password:
        h = ord(ch) + (h << 6) + (h << 16) - h
        h &= 0xFFFFFFFF  # Force to 32-bit
    return h

def stream_cypher(in_file: str, out_file: str, password: str):

    seed = make_hash(password)

    keystream = LinCon_gen(seed)

    # break file up in chunks
    chunk_size = 4096
    with open(in_file, "rb") as fin, open(out_file, "wb") as fout:
        while True:
            chunk = fin.read(chunk_size)
            if not chunk:
                break
            # XOR each byte in the chunk with the next keystream byte
            out_chunk = bytearray(len(chunk))
            for i, b in enumerate(chunk):
                out_chunk[i] = b ^ next(keystream)
            fout.write(out_chunk)

def main():
    
    if len(sys.argv) != 4:
        print("Please Use: ./scrypt <password> <input_file> <output_file>")
        sys.exit(1)

    password = sys.argv[1]
    input_file = sys.argv[2]
    output_file = sys.argv[3]

    stream_cypher(input_file, output_file, password)
    print(f"Processed {input_file} and saved result to {output_file}")

if __name__ == '__main__':
    main()
