#!/usr/bin/python3
import sys

# Author: Richard Li - (rl902)

def LinCon_gen(seed):
    
    x = seed % 256
    while True:
        x = (1103515245 * x + 12345) % 256
        yield x

def make_hash(password):

    h = 0
    for ch in password:
        h = ord(ch) + (h << 6) + (h << 16) - h
        h &= 0xFFFFFFFFFFFFFFFF  # Force to 64 bits
    return h

def encrypt(password: str, plaintext_file: str, ciphertext_file: str):

    # Generate a random IV from /dev/random.
    try:
        with open("/dev/random", "rb") as rand_source:
            iv_bytes = rand_source.read(8)
            if len(iv_bytes) != 8:
                sys.exit("Error: Could not read 8 bytes from /dev/random.")
    except Exception as e:
        sys.exit("Error reading /dev/random: " + str(e))
    
    iv_int = int.from_bytes(iv_bytes, byteorder="little")
    
    seed = make_hash(password) ^ iv_int
    
    keystream = LinCon_gen(seed)

    # Encrypt the File
    with open(plaintext_file, "rb") as fin, open(ciphertext_file, "wb") as fout:
        fout.write(iv_int.to_bytes(8, byteorder="little"))
        
        # divide in chunks.
        chunk_size = 4096
        while True:
            chunk = fin.read(chunk_size)
            if not chunk:
                break
            out_chunk = bytearray(len(chunk))
            for i, b in enumerate(chunk):
                out_chunk[i] = b ^ next(keystream)
            fout.write(out_chunk)

def decrypt(password: str, ciphertext_file: str, plaintext_file: str):

    with open(ciphertext_file, "rb") as fin:
        # Get the IV.
        iv_bytes = fin.read(8)
        if len(iv_bytes) != 8:
            sys.exit("Error: Ciphertext file too short (missing IV).")
        iv_int = int.from_bytes(iv_bytes, byteorder="little")
        
        seed = make_hash(password) ^ iv_int
        keystream = LinCon_gen(seed)
        
        with open(plaintext_file, "wb") as fout:
            chunk_size = 4096
            while True:
                chunk = fin.read(chunk_size)
                if not chunk:
                    break
                out_chunk = bytearray(len(chunk))
                for i, b in enumerate(chunk):
                    out_chunk[i] = b ^ next(keystream)
                fout.write(out_chunk)

def main():

    if len(sys.argv) != 5:
        print("Please Use: ./vcrypt -e password plaintext ciphertext")
        print("Please Use: ./vcrypt -d password plaintext ciphertext")
        sys.exit(1)

    mode = sys.argv[1]
    password = sys.argv[2]
    input_file = sys.argv[3]
    output_file = sys.argv[4]

    if mode == "-e":
        encrypt(password, input_file, output_file)
        print(f"Encrypted {input_file} and saved result to {output_file}")
    elif mode == "-d":
        decrypt(password, input_file, output_file)
        print(f"Decrypted {input_file} and saved result to {output_file}")
    else:
        print("Invalid mode. Use -e for encryption or -d for decryption.")
        sys.exit(1)

if __name__ == "__main__":
    main()
