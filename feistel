#!/usr/bin/python3
import sys

# Author: Richard Li - (rl902)

BLOCK_SIZE = 16 

def make_hash(text: str) -> int:

    h = 0
    for ch in text:
        h = ord(ch) + (h << 6) + (h << 16) - h
        h &= 0xFFFFFFFFFFFFFFFF # Force to 64 bits
    return h

def create_rkeys(main_key: int, rounds: int = 10) -> list:

    rkeys = [0] * rounds
    rkeys[0] = main_key & 0xFFFFFFFFFFFFFFFF
    for i in range(1, rounds):
        rkeys[i] = (rkeys[i - 1] * 1103515245 + 12345) & 0xFFFFFFFFFFFFFFFF
    return rkeys

def frounder(r: int, k: int) -> int:

    temp = ((r ^ k) * 0xa3b2c1) & 0xFFFFFFFFFFFFFFFF
    # rotate by 23 bits 
    right = temp >> 23
    left  = (temp << 41) & 0xFFFFFFFFFFFFFFFF
    return (right | left) & 0xFFFFFFFFFFFFFFFF

def add_pad(data: bytes, block_size: int = BLOCK_SIZE) -> bytes:
    
    length = len(data)
    pad_len = block_size - (length % block_size)
    padding = bytes([pad_len] * pad_len)    # If it's already a multiple, no need to use block_size
    return data + padding

def remove_pad(data: bytes, block_size: int = BLOCK_SIZE) -> bytes:
    
    if not data:
        return data  

    pad_len = data[-1]
    if pad_len < 1 or pad_len > block_size:
        raise ValueError("Bad padding encountered.")
    
    # Check that the last pad_len bytes are indeed all pad_len
    if data[-pad_len:] != bytes([pad_len] * pad_len):
        raise ValueError("Bad padding encountered.")
    
    return data[:-pad_len]

def encrypt(block: bytes, round_keys: list) -> bytes:
    
    # Split to halves
    left = int.from_bytes(block[:8], byteorder='big')
    right = int.from_bytes(block[8:], byteorder='big')

    # 10 rounds
    for i in range(10):
        f_output = frounder(right, round_keys[i])
        new_right = left ^ f_output
        new_left = right
        left, right = new_left, new_right

    # Swap em
    left, right = right, left

    # Recombine
    encrypted_block = left.to_bytes(8, byteorder='big') + right.to_bytes(8, byteorder='big')
    return encrypted_block

def decrypt(block: bytes, round_keys: list) -> bytes:
    
    # Split into halves
    left = int.from_bytes(block[:8], byteorder='big')
    right = int.from_bytes(block[8:], byteorder='big')

    # 10 rounds backwards
    for i in range(9, -1, -1):
        f_output = frounder(right, round_keys[i])
        new_right = left ^ f_output
        new_left = right
        left, right = new_left, new_right

    # swap
    left, right = right, left

    # Recombine
    decrypted_block = left.to_bytes(8, byteorder='big') + right.to_bytes(8, byteorder='big')
    return decrypted_block

def feistel_encrypt(data: bytes, round_keys: list) -> bytes:
    
    # Pad the data
    padded = add_pad(data, BLOCK_SIZE)

    # Encrypting
    ciphertext = b""
    for i in range(0, len(padded), BLOCK_SIZE):
        block = padded[i : i + BLOCK_SIZE]
        ciphertext_block = encrypt(block, round_keys)
        ciphertext += ciphertext_block

    return ciphertext

def feistel_decrypt(data: bytes, round_keys: list) -> bytes:
    
    if len(data) % BLOCK_SIZE != 0:
        raise ValueError("Not a M of 16 bytes.")

    plaintext_padded = b""
    for i in range(0, len(data), BLOCK_SIZE):
        block = data[i : i + BLOCK_SIZE]
        plaintext_block = decrypt(block, round_keys)
        plaintext_padded += plaintext_block

    # Remove padding
    plaintext = remove_pad(plaintext_padded, BLOCK_SIZE)
    return plaintext

def main():
    if len(sys.argv) != 5:
        print("Please Use: ./feistel -e <password> <plaintext_file> <ciphertext_file>")
        print("Please Use: ./feistel -d <password> <ciphertext_file> <plaintext_file>")
        sys.exit(1)

    mode = sys.argv[1]
    password = sys.argv[2]
    input_file = sys.argv[3]
    output_file = sys.argv[4]

    # Convert password to 64-bit main key
    main_key = make_hash(password)
    # Generate 10 round keys
    round_keys = create_rkeys(main_key, 10)

    if mode == "-e":
        with open(input_file, "rb") as f_in:
            plaintext_data = f_in.read()

        ciphertext_data = feistel_encrypt(plaintext_data, round_keys)

        with open(output_file, "wb") as f_out:
            f_out.write(ciphertext_data)
        
        print(f"Encrypted {input_file} and saved result to {output_file}")

    elif mode == "-d":
        with open(input_file, "rb") as f_in:
            ciphertext_data = f_in.read()

        try:
            plaintext_data = feistel_decrypt(ciphertext_data, round_keys)
        except ValueError as e:
            print(f"Decryption error: {e}")
            sys.exit(1)

        with open(output_file, "wb") as f_out:
            f_out.write(plaintext_data)
        
        print(f"Decrypted {input_file} and saved result to {output_file}")

    else:
        print("Pls use '-e' or '-d'.")
        sys.exit(1)

if __name__ == "__main__":
    main()